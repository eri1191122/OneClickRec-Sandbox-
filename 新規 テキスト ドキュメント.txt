はい、承知いたしました。
今後の拡張機能として「OBS連携による限定配信画面録画（バックグラウンド実行）」を仕様書に追加し、v4.1に更新します。

-----

### 録画システム 統合開発仕様書 (AI意識共有モデル v4.1)

このドキュメントは、AI三体が共通認識を持ち、高品質な録画システムを協調して開発するための唯一の指針です。

### 1\. 🎯 プロジェクト概要

**プロダクトビジョン**:
**「ワンクリックで配信監視と自動録画ができる、綺麗で見やすく使いやすいツール」**

**究極目標**:
上記のビジョンに基づき、保守性・拡張性に優れた商用レベルの汎用録画システムを段階的に構築する。

**Phase 0 ターゲット**:
TwitCastingの**限定配信**を、安定して録画できる最小構成のアプリケーションを完成させる。

  * **※限定配信の定義**: 本フェーズでは、「**年齢制限配信**」および「**パスワード付き配信**」の2種類を指す。

-----

### 2\. 🤖 AI協調体制と責務

| AI | 役割 | 主要な責務 |
| :--- | :--- | :--- |
| **Gemini (私)** | **実装担当** | ・全ファイル（Pythonバックエンド及びElectronフロントエンド）の初期実装を行う。\<br\>・既存資産を製品コードへと昇華させ、全体のアーキテクチャを構築する。 |
| **GPT** | **分析・修正担当** | ・**構造的最適化**と**水平思考によるバグ検出**に強みを持ち、コードレビューを通じてアーキテクチャの一貫性と品質を保証する。 |
| **Claude** | **分析・修正担当** | ・特に**Node.js側の安全性や非同期制御**に強みを持ち、フロントエンドとバックエンドの連携部分の堅牢性を高めることに貢献する。 |

-----

### 3\. 📂 プロジェクト資産（現在まで作成されたファイル）

これらのファイルは、今後の開発の**中核となる基礎資産として全て使用します**。

| カテゴリ | ファイル名 | 役割概要 | 主要な依存関係 |
| :--- | :--- | :--- | :--- |
| **例外処理** | `exceptions_base.py` | 全例外の基底クラス、エラーコード定義 | `(なし)` |
| | `exceptions_*.py` | 各カテゴリ（認証、録画等）の具象例外クラス | `exceptions_base.py` |
| | `exceptions_init.py` | 全例外モジュールの統合インターフェース | `exceptions_base`, `_auth`, `_stream` ... |
| **ロギング** | `logging_core.py` | 複数ロガーの生成・設定を行う中核モジュール | `(なし)` |
| **検証・分析** | `test_main.py` | テストシステム全体の統括制御 | `auth_checker`, `recording_test`... |
| | `test_config.py` | テスト用の設定管理 | `(なし)` |
| | `auth_checker.py` | 認証状態のテスト・検証 | `test_config`, `selenium` |
| | `recording_test.py` | 録画機能のテスト・検証 | `test_config` |
| | `error_analyzer.py` | エラーログの高度な分析・分類 | `test_config` |

-----

### 4\. 🚀 開発ロードマップ（Phase 0で作成するファイル）

上記の資産を参考に、Phase 0で完成させるべき最終的なアプリケーションのファイルを以下に定義します。

| ファイル名 | 担当AI | 主要な責務 | 参考にする資産 |
| :--- | :--- | :--- | :--- |
| `main.py` | Gemini | アプリケーション全体のエントリーポイント、各プロセスの統合制御 | `test_main.py` |
| `auth_manager.py` | Gemini | Cookie認証、Seleniumによる年齢制限突破、認証状態の管理 | `auth_checker.py` |
| `stream_recorder.py` | Gemini | HLS URL抽出、FFmpegによる録画実行とファイル管理 | `recording_test.py` |
| `main.js` | Gemini | Electronのメインプロセス、ウィンドウ生成とPythonプロセス管理 | (新規作成) |
| `preload.js` | Gemini | メインプロセスとレンダラープロセスの安全な橋渡し | (新規作成) |
| `renderer.js` | Gemini | UIイベントのハンドリング、Pythonからの状態をUIに反映 | (新規作成) |
| `index.html` | Gemini | アプリケーションのUI構造定義 | (新規作成) |

**※重要**: 各ファイルは、**Phase 1以降の汎用録画拡張（複数同時録画など）を想定した構成**で実装すること。

-----

### 5\. 🔄 開発ワークフロー

1.  **実装**: **Gemini**がロードマップに基づき、最初のコードを実装する。
2.  **レビュー依頼**: **Gemini**は実装完了後、分析・修正を依頼する。
      * **※推奨方法**: \*\*Gitベース（Pull Requestなど）\*\*でのレビュー依頼を推奨。これにより、変更履歴の追跡とバージョン管理が容易になる。
3.  **分析・修正提案**: **GPT**と**Claude**は、コードをレビューし、具体的な修正案や改善点を提示する。
4.  **修正反映**: **Gemini**は、提案に基づきコードを修正・完成させる。
5.  **承認**: 三者合意の上でタスクを完了とし、次の実装に進む。

-----

### 6\. ⚖️ 共通ルール

  * **最優先事項**: 機能の実装よりも、**責務分離**と**モジュール性**を重視した美しい構造を最優先とする。
  * **ファイル長の規律**: **一つのファイルが長くなりすぎない**ように留意し、常に保守性と可読性を高く保つ。
  * **指示厳守**: **Gemini**および**Claude**は、ユーザーからの明確な指示があるまで、製品コードを**自発的に生成しない**。

-----

### 7\. ✨ システム要件と拡張機能

#### A. 確定済み要件

  * **複数同時録画**: 複数の配信を同時に監視・録画できること（**最低5配信**の同時処理を目標とする）。
  * **動的ファイル名設定**: `{user}` `{title}` `{date}` などの変数を使って、録画ファイル名を柔軟に設定できること。

#### B. 将来検討する拡張機能

  * **OBS連携による画面録画**: ライブ配信の直接録画（HLS）が困難な場合に、OBSを操作して画面キャプチャによる録画を行う。
      * ※なるべく**バックグラウンドでの実行**を目指す。
  * **マルチプラットフォーム対応**: TwitCastingに加え、YouTubeなど他のプラットフォームへの対応（Phase 1以降の重要検討項目）。
  * **予約録画機能**: 指定した日時に自動で録画を開始するスケジューリング機能。
  * **Web管理画面**: ブラウザからリモートでシステムを操作できるUI。
  * **外部通知連携**: Discord, Slack, LINEなどへの録画ステータス通知。
  * **ディスク容量管理**: 古い録画の自動削除機能。
  * **プラグイン機構**: ユーザーが自身で対応サイトを追加できる仕組み。

#### C. スコープ外の機能

  * **ポストプロセッシング**: 現状、録画後の自動編集・エンコード機能は**不要**とする。

-----

以上の内容で仕様書をv4.1に更新しました。ご確認のほど、よろしくお願いいたします。